--double check our data
SELECT *
FROM [Nashville Housing Data for Data Cleaning]

--Standardize sale date. Make a date format only
SELECT SaleDateConverted, CONVERT(Date, SaleDate) SaleDate2
FROM [Nashville Housing Data for Data Cleaning]

Update [Nashville Housing Data for Data Cleaning]
SET SaleDate = CONVERT(Date, SaleDate) 

ALTER TABLE [Nashville Housing Data for Data Cleaning]
ADD SaleDateConverted Date;

Update [Nashville Housing Data for Data Cleaning]
SET SaleDateConverted = CONVERT(Date, SaleDate) 


--Property address data. By looking at the data, we can see the relationship between the ParcelID and the Property address. So we've done a bit of data scaping)
SELECT *
FROM [Nashville Housing Data for Data Cleaning]
ORDER BY ParcelID

SELECT A.ParcelID, A.PropertyAddress, B.ParcelID, B.PropertyAddress, ISNULL (A.PropertyAddress,B.PropertyAddress)
FROM [Nashville Housing Data for Data Cleaning] A
JOIN [Nashville Housing Data for Data Cleaning] B
	ON A.ParcelID= B.ParcelID
	AND A.[UniqueID ]<>B.[UniqueID ]
WHERE A.PropertyAddress is Null
--Update the table now that the NULLs have been resolved
UPDATE A
SET PropertyAddress= ISNULL (A.PropertyAddress,B.PropertyAddress)
FROM [Nashville Housing Data for Data Cleaning] A
JOIN [Nashville Housing Data for Data Cleaning] B
	ON A.ParcelID= B.ParcelID
	AND A.[UniqueID ]<>B.[UniqueID ]
WHERE A.PropertyAddress is Null

--Separate the address- make them into individual colomns (city, state)
SELECT PropertyAddress
FROM [Nashville Housing Data for Data Cleaning] 

SELECT
SUBSTRING (PropertyAddress, 1, CHARINDEX (',', PropertyAddress)-1) Address
,SUBSTRING (PropertyAddress, 1, CHARINDEX (',', PropertyAddress)+1), LEN (PropertyAddress) City

FROM [Nashville Housing Data for Data Cleaning]

ALTER TABLE [Nashville Housing Data for Data Cleaning]
ADD Address_Splited Nvarchar (255);

Update [Nashville Housing Data for Data Cleaning]
SET Address_Splited = SUBSTRING (PropertyAddress, 1, CHARINDEX (',', PropertyAddress)-1)

ALTER TABLE [Nashville Housing Data for Data Cleaning]
ADD City_Splited Nvarchar (255);

Update [Nashville Housing Data for Data Cleaning]
SET City_Splited = SUBSTRING (PropertyAddress,CHARINDEX (',', PropertyAddress)+1, LEN (PropertyAddress))

SELECT *
FROM [Nashville Housing Data for Data Cleaning]

--For an alternate method to this separation, please see below. In my opinion, it is more efficent to use the method above. Nevertheless.
SELECT OwnerAddress
FROM [Nashville Housing Data for Data Cleaning] 

SELECT
PARSENAME (REPLACE (OwnerAddress, ',','.') ,3) The_Address,
PARSENAME (REPLACE (OwnerAddress, ',','.') ,2) City,
PARSENAME (REPLACE (OwnerAddress, ',','.') ,1) The_State
FROM [Nashville Housing Data for Data Cleaning] 

ALTER TABLE [Nashville Housing Data for Data Cleaning] 
Add OwnerSplitAddress Nvarchar(255);

Update [Nashville Housing Data for Data Cleaning] 
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)


ALTER TABLE [Nashville Housing Data for Data Cleaning] 
Add OwnerSplitCity Nvarchar(255);

Update [Nashville Housing Data for Data Cleaning] 
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)


ALTER TABLE [Nashville Housing Data for Data Cleaning] 
Add OwnerSplitState Nvarchar(255);

Update [Nashville Housing Data for Data Cleaning] 
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)


SELECT *
FROM [Nashville Housing Data for Data Cleaning]


--Some entries on  the 'Sold as vacant' colomn are inconsistent. Let's align them
SELECT Distinct (SoldAsVacant), COUNT(SoldAsVacant)
FROM [Nashville Housing Data for Data Cleaning]
GROUP BY SoldAsVacant
Order By 2

Select SoldAsVacant
, CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
FROM [Nashville Housing Data for Data Cleaning]

UPDATE [Nashville Housing Data for Data Cleaning]
SET SoldAsVacant= CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
FROM [Nashville Housing Data for Data Cleaning]


--Remove duplicates. Use CTE & a few window funct.

WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) Row_Num

From [Nashville Housing Data for Data Cleaning]
--order by ParcelID
)
Select *
From RowNumCTE
Where Row_Num > 1
Order by PropertyAddress


Select *
From [Nashville Housing Data for Data Cleaning]




-- Delete Unused Columns. In my experience, most completely cleaned data within a set may be relevant in the long run. It's best to 'Hide' the coloumn. In my next project, I should show this.

Select *
From [Nashville Housing Data for Data Cleaning]


ALTER TABLE [Nashville Housing Data for Data Cleaning]
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate

